// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MathContract is an autogenerated mock type for the MathContract type
type MathContract struct {
	mock.Mock
}

// Add provides a mock function with given fields:
func (_m *MathContract) Add() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// AddAndMultiply provides a mock function with given fields:
func (_m *MathContract) AddAndMultiply() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Divide provides a mock function with given fields:
func (_m *MathContract) Divide() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Multiply provides a mock function with given fields:
func (_m *MathContract) Multiply() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Subtract provides a mock function with given fields:
func (_m *MathContract) Subtract() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewMathContract interface {
	mock.TestingT
	Cleanup(func())
}

// NewMathContract creates a new instance of MathContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMathContract(t mockConstructorTestingTNewMathContract) *MathContract {
	mock := &MathContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
